{"version":3,"sources":["EmotionTable.js","App.js","reportWebVitals.js","index.js"],"names":["EmotionTable","className","Object","keys","this","props","emotions","map","key","React","Component","App","renderTextArea","document","getElementById","value","state","mode","setState","innercomp","rows","cols","id","sentimentOutput","sentiment","renderTextBox","sendForSentimentAnalysis","url","axios","get","then","response","console","log","data","output","label","style","color","fontSize","catch","alert","sendForEmotionAnalysis","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ec21b097.chunk.js","sourcesContent":["import React from 'react';\r\nimport './bootstrap.min.css';\r\n\r\nclass EmotionTable extends React.Component {\r\n    render() {\r\n      return (  \r\n        <div>\r\n          {/*You can remove this line and the line below. */}\r\n          <table className=\"table table-bordered\">\r\n            <tbody>\r\n              { \r\n                Object.keys(this.props.emotions).map((key) => {\r\n                    return (\r\n                      <tr key={key}>\r\n                        <td>{key}</td>\r\n                        <td>{this.props.emotions[key]}</td>\r\n                      </tr>\r\n                    )\r\n                  }\r\n                )\r\n              }\r\n            </tbody>\r\n          </table>\r\n          </div>\r\n          );\r\n        }\r\n    \r\n}\r\nexport default EmotionTable;\r\n","import './bootstrap.min.css';\r\nimport './App.css';\r\nimport EmotionTable from './EmotionTable.js';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n      super(props);\r\n      this.state = {innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n                    mode: \"text\",\r\n                    sentimentOutput:[],\r\n                    sentiment:true\r\n                  };\r\n      this.url = '.';\r\n  }\r\n\r\n  renderTextArea = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"url\") {\r\n      this.setState({innercomp:<textarea rows=\"4\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"text\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  renderTextBox = ()=>{\r\n    document.getElementById(\"textinput\").value = \"\";\r\n    if(this.state.mode === \"text\") {\r\n      this.setState({innercomp:<textarea rows=\"1\" cols=\"50\" id=\"textinput\"/>,\r\n      mode: \"url\",\r\n      sentimentOutput:[],\r\n      sentiment:true\r\n    })\r\n    }\r\n  }\r\n\r\n  sendForSentimentAnalysis = () => {\r\n    this.setState({sentiment:true});\r\n    let ret = \"\";\r\n    let url = this.url;\r\n\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/sentiment?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/sentiment?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n    ret.then((response)=>{\r\n      //Include code here to check the sentiment and fomrat the data accordingly\r\n      console.log(response.data);\r\n      let output = response.data.label;\r\n      if(output === \"positive\") {\r\n        output = <div style={{color:\"green\",fontSize:20}}>{output}</div>\r\n      } else if (output === \"negative\"){\r\n        output = <div style={{color:\"red\",fontSize:20}}>{output}</div>\r\n      } else {\r\n        output = <div style={{color:\"orange\",fontSize:20}}>{output}</div>\r\n      }\r\n      this.setState({sentimentOutput:output});\r\n    }).catch(() => alert('Invaild input!'));\r\n  }\r\n\r\n  sendForEmotionAnalysis = () => {\r\n    this.setState({sentiment:false});\r\n    let ret = \"\";\r\n    let url = this.url;\r\n    if(this.state.mode === \"url\") {\r\n      url = url+\"/url/emotion?url=\"+document.getElementById(\"textinput\").value;\r\n    } else {\r\n      url = url+\"/text/emotion/?text=\"+document.getElementById(\"textinput\").value;\r\n    }\r\n    ret = axios.get(url);\r\n\r\n    ret.then((response)=>{\r\n      this.setState({sentimentOutput:<EmotionTable emotions={response.data}/>});\r\n    }).catch(() => alert('Invaild input!'));\r\n  }\r\n\r\n  render() {\r\n    const mode = this.state.mode;\r\n    return (  \r\n      <div className=\"App\">\r\n        <button className={mode === 'text'? \"btn btn-info\" : \"btn btn-dark\"} onClick={this.renderTextArea}>Text</button>\r\n        <button className={mode === 'url'? \"btn btn-info\" : \"btn btn-dark\"}  onClick={this.renderTextBox}>URL</button>\r\n        <br/><br/>\r\n        {this.state.innercomp}\r\n        <br/>\r\n        <button className=\"btn-primary\" onClick={this.sendForSentimentAnalysis}>Analyze Sentiment</button>\r\n        <button className=\"btn-primary\" onClick={this.sendForEmotionAnalysis}>Analyze Emotion</button>\r\n        <br/>\r\n            {this.state.sentimentOutput}\r\n      </div>\r\n    );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}